# coding=utf-8

"""
Методы описания нейронной сети и работы с ней в процессе обучения и/или использования
"""


import neural_network_impl as nn


class NeuralNetwork:
    """
    Класс, описывающий нейронную сеть.
    Структура нейросети:
        * _data
          массив массивов имеющий смысл массива нейронов и входных данных.
          Каждый нейрон описывается массивом значений, представляющих собой данные аксона.
          Нулевой элемент этого массива -- аккумулятор для текущих вычислений на нейроне.
          Последний элемент -- текущее значение нейрона.
          Самый простейший аксон состоит не менее чем из двух элементов
          Входные данные представляют собой массив из одного элемента
        * _synapses
          массив триплетов, описывающих синапсы. Элементы триплетов имеют следующий смысл:
            * вес синаптической связи
            * индекс нейрона, являющегося входным для данного синапса
            * индекс нейрона, являющегося выходным для синапса
    Note: _synapses определяет конфигурацию нейросети и состояние ее обученности.
          _data определяет оперативные данные.
          Зануление всех элементов _data сбрасывает нейросеть в начальное состояние.
          Зануление _synapses уничтожит нейросеть
    Нейросеть работает тактами. На каждом такте выполняются следующие действия:
        * заполняются входные данные
        * данные аксонов смещаются на один шаг (по направлению к хвосту)
        * начала аксонов, представляющие собой аккумуляторы для вычислений на нейроне зануляются
        * для всех синапсов выполняются вычисления. Результат вычислений аккумулируется в начале соответствующего аксона
        * для всех нейронов выполняется вычисление значения передаточной функции. Источником и результатом является аккумулятор нейрона
        * заполняются выходные данные
    """

    @property
    def data(self):
        return self._data

    def __init__(self, id):

        if id == 0:
            self._data = nn.Builder().build_protozoan()
        else:
            self._data = nn.SaveLoad().load(id)

    def save(self):
        # todo: реализовать вычисление времени отклика, качества и приспособленности НС
        return nn.SaveLoad().save(self._data)

    def load_inputs(self, inputs):
        """
        Загрузка входных данных в нейросеть.
        """
        for neuron_ind, val in zip(self.data.input_neurons, inputs):
            self.data.neurons[neuron_ind].axon[0] = val

    def get_outputs(self):
        """
        Выгрузка выходных данных
        """
        return list(self.data.neurons[output_ind].axon[-1] for output_ind in self.data.output_neurons)

    def do_iteration(self, ):
        # todo: реализовать через tensorflow
        pass
        # # shortcats
        # neurons     = self.data.neurons
        # synapses    = self.data.synapses
        #
        # # прокручиваем аксоны
        # for n in neurons:
        #     if (len(n.axon) > 1): # исключаем рецепторы (у которых длина аксона == 1)
        #         n.axon = [0] + n.axon[0:-1]
        #
        # # выполняем действия над синапсами
        # for synapse in synapses:
        #     neurons[synapse.own].axon[0] += neurons[synapse.src].axon[-1] * neurons[synapse.own].weight
        #
        # # применяем передаточную функцию
        # for n in neurons:
        #     if (len(n.axon) > 1): # исключаем рецепторы (у которых длина аксона == 1)
        #         n.axon[0] = n.transfer_function.func(n.axon[0], n.transfer_function_params)

    def reset(self):
        """
        Сбросить состояние нейросети в исходное.
        """
        self.data.reset()

    # def clone(self):
    #     """
    #     Создать копию данных нейросети
    #     """
    #     return self.data.clone()
    #
    # def clone_clean(self):
    #     """
    #     Создать нейросеть с такой же структурой, но с начальным состоянием
    #     """
    #     return self.data.clone_clean()
    #
    # def clone_state(self):
    #     """
    #     Сохранить состояние нейросети
    #     :return: состояние нейросети (на данный момент состояние содержится в массиве аксонов)
    #     """
    #     return self.data.clone_state()
    #
    # def restore_state(self, state):
    #     """
    #     Восстановить состояние нейросети, сохраненное с помощью метода clone_state()
    #     :param state: состояние НС, полученное ранее с помощью метода clone_state()
    #     """
    #     self.data.restore_state(state)
